// (FSRCNNX_x2_8-0-4-1) sub-band residuals 2


cbuffer constants : register(b0) {
	int2 srcSize : packoffset(c0.x);
};


#define MAGPIE_INPUT_COUNT 3
#define MAGPIE_NO_CHECK
#include "FSRCNNX8041.hlsli"


D2D_PS_ENTRY(main) {
	InitMagpieSampleInput();

	float4 res = { -0.0425243787467480,-0.3715015351772308,-0.0256227850914001,-0.2774516046047211 };
	res += mul(uncompressTan(SampleInputCur(0)), float4x4(0.0238118842244148, 0.0295480657368898, -0.0066418983042240, 0.1021223962306976, -0.0568209178745747, -0.4355100393295288, -0.2700522541999817, -0.2060186564922333, -0.0689613372087479, -0.1689691990613937, -0.0306748505681753, -0.2461252212524414, -0.0057375836186111, -0.1892303228378296, -0.0285871494561434, -0.5032613277435303));
	res += mul(uncompressTan(SampleInputCur(1)), float4x4(0.5463213324546814, 0.0972800329327583, 0.0307560767978430, 0.0678058937191963, -0.0356063023209572, -0.7013865113258362, 0.1890443563461304, -0.1036657467484474, -0.1745826154947281, -0.2942218780517578, -0.0485423319041729, -0.2983124554157257, -0.0524431839585304, -0.3261034786701202, 0.3217246532440186, 0.1958018541336060));
	res += uncompressLinear(SampleInputCur(2), -2, 2);
	res = max(res, ZEROS4) + float4(0.1391339898109436, 0.0960328355431557, 0.6235341429710388, 0.1177272796630859) * min(res, ZEROS4);

	return compressLinear(res, -1, 4);
}
