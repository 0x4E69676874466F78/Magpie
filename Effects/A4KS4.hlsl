cbuffer cb : register(b0) {
	float inputPtX;
	float inputPtY;
	uint2 viewportOffset;
	uint4 viewport;
};

SamplerState sam : register(s0);
SamplerState sam1 : register(s1);

Texture2D INPUT : register(t0);
Texture2D ORIGIN : register(t1);

RWTexture2D<float4> OUTPUT : register(u0);


float4 A4KS4(float2 pos) {
	// [ a, d, g ]
	// [ b, e, h ]
	// [ c, f, i ]
	float2 tpos = pos - 0.5f * float2(inputPtX, inputPtY);
	const float4 sr = INPUT.GatherRed(sam, tpos);
	const float4 sg = INPUT.GatherGreen(sam, tpos);
	const float4 sb = INPUT.GatherBlue(sam, tpos);
	const float4 sa = INPUT.GatherAlpha(sam, tpos);

	float4 a = float4(sr.w, sg.w, sb.w, sa.w);
	float4 b = float4(sr.x, sg.x, sb.x, sa.x);
	float4 c = INPUT.SampleLevel(sam, pos + float2(-inputPtX, inputPtY), 0);
	float4 d = float4(sr.z, sg.z, sb.z, sa.z);
	float4 e = float4(sr.y, sg.y, sb.y, sa.y);
	float4 f = INPUT.SampleLevel(sam, pos + float2(0, inputPtY), 0);
	float4 g = INPUT.SampleLevel(sam, pos + float2(inputPtX, -inputPtY), 0);
	float4 h = INPUT.SampleLevel(sam, pos + float2(inputPtX, 0), 0);
	float4 i = INPUT.SampleLevel(sam, pos + float2(inputPtX, inputPtY), 0);

	float4 result = mul(max(a, 0), float4x4(0.019100675, -0.014241565, 0.004667036, -0.03865062, 0.106731094, 0.026099661, 0.014594411, -0.011881356, 0.0040967264, -0.004626336, 0.006469508, 0.010875305, -0.033909045, -0.085905954, 0.07861378, 0.019452631));
	result += mul(max(b, 0), float4x4(0.20777655, -0.060354974, 0.0023840065, -0.064121604, -0.17397617, 0.019293457, -0.09707183, 0.080641985, 0.01025124, -0.017382381, 0.008661793, -0.010995665, 0.21943407, -0.115574986, 0.14471593, -0.068836235));
	result += mul(max(c, 0), float4x4(0.057942886, -0.06311754, 0.2253396, -0.04159292, -0.020731755, 0.007877151, 0.041525815, 0.025278691, 0.03041967, -0.025137542, 0.024364179, -0.024543528, 0.029438615, -0.015506873, 0.081686, -0.07812221));
	result += mul(max(d, 0), float4x4(0.054237515, 0.0676094, -0.0047708177, 0.0043467237, -0.10032304, -0.020498628, 0.04240586, 0.07272254, 0.0784221, 0.017945962, -0.022310399, -0.013134622, 0.015638694, -0.10001543, 0.1043031, 0.05898838));
	result += mul(max(e, 0), float4x4(-0.021652509, 0.35796642, 0.059497777, 0.23948468, 0.15454951, -0.10017235, -0.19072174, -0.44812536, -0.03974552, 0.04529369, 0.22207436, 0.026222564, -0.09705454, 0.5623026, -0.3354105, -0.017278556));
	result += mul(max(f, 0), float4x4(-0.053682446, -0.03411237, -0.09399936, 0.15128824, -0.07463, -0.042020727, 0.0031783928, 0.13481957, -0.07731454, 0.044114403, -0.23085599, 0.060444202, -0.15015422, 0.0018040676, -0.18684982, 0.2812511));
	result += mul(max(g, 0), float4x4(0.0029329916, 0.001596018, 0.0007512241, 0.016544111, -0.04876942, -0.05272409, 0.037884697, 0.049948208, 0.015518177, 0.11368592, -0.03815777, -0.013149978, -0.027638039, 0.107719295, -0.04115787, 0.02745414));
	result += mul(max(h, 0), float4x4(0.016691081, 0.010204119, 0.04078854, 0.01613337, 0.03325829, 0.0114824055, -0.017286912, -0.07284126, -0.110984206, -0.21041764, 0.0089543555, 0.18986733, 0.01537506, -0.2059135, 0.029074017, 0.013117443));
	result += mul(max(i, 0), float4x4(0.013965926, 0.029871881, 0.0034499036, -0.011343668, 0.022120327, -0.0068748263, 0.009324342, -0.039081004, 0.08032371, 0.050809264, 0.035050742, -0.2032847, 0.06305391, -0.021958945, 0.038569167, -0.22465245));
	result += mul(max(-a, 0), float4x4(0.046307724, -0.012419472, 0.007673863, -0.042344846, 0.011042414, 0.016994251, -0.018166406, -0.016955731, -0.13240299, 0.01768431, -0.027607648, 0.0699927, -0.02840628, 0.004414203, 0.0049618417, 0.011084679));
	result += mul(max(-b, 0), float4x4(-0.119954154, -0.007455482, -0.031108133, -0.009946449, 0.0077065965, 0.01660345, 0.032943666, 0.016376585, 0.10273124, 0.1556573, -0.24643841, 0.107307844, -0.068235755, 0.0561896, -0.0104672015, 0.042693343));
	result += mul(max(-c, 0), float4x4(-0.01634601, 0.04195375, -0.10401894, 0.047641944, -0.034602515, -0.0034419263, -0.010457858, 0.015194475, -0.03962551, -0.030031368, 0.16036317, 0.019283568, -0.05877721, 0.016504882, -0.15523468, 0.018161612));
	result += mul(max(-d, 0), float4x4(-0.08083991, 0.0024665035, -0.049373373, 0.030371357, 0.0113322195, -0.014676956, 0.011646689, -0.01142667, 0.124930486, 0.06625774, -0.045840867, -0.009693036, -0.012649251, -0.07388084, 0.008790075, 0.0013844534));
	result += mul(max(-e, 0), float4x4(-0.33941835, -0.2763476, -0.118311435, -0.063535266, 0.20936015, 0.13731301, 0.13443594, 0.07464433, 0.059650812, -0.36973104, 0.16444235, -0.37082872, 0.06432777, -0.18283032, -0.044489607, -0.13895285));
	result += mul(max(-f, 0), float4x4(0.13533665, 0.08268915, -0.03675727, -0.14348659, 0.0186255, -0.05051692, 0.056702953, 0.0061717895, 0.047663026, -0.088188455, 0.23254345, -0.014015464, 0.08400204, -0.0073777726, 0.2202068, -0.12366078));
	result += mul(max(-g, 0), float4x4(0.04361004, 0.046543695, 0.0064863074, -0.03358146, -0.022602187, 0.018138997, -0.011071864, 0.010244091, -0.019814799, -0.17250171, 0.040823266, -0.040131986, 0.010125854, 0.020660749, 0.0020435036, -0.010819304));
	result += mul(max(-h, 0), float4x4(-0.004810193, -0.11286074, 0.051985834, 0.04788631, -0.023950428, 0.036145125, -0.038203828, 0.052401308, 0.022986965, 0.26420745, -0.06076917, -0.09252999, 0.03164547, 0.15652153, -0.037934, -0.0035418556));
	result += mul(max(-i, 0), float4x4(0.03358366, -0.005219482, 0.007060882, -0.06569114, -0.02941682, 0.00966056, -0.0153679885, 0.019905418, -0.107232265, -0.03405676, -0.044340115, 0.26892832, -0.04723829, -0.02589829, 0.004563232, 0.19318114));
	result += float4(-0.00346731, -0.0046263863, -0.004627155, -0.0057769152);
	return result;
}

uint ABfe(uint src, uint off, uint bits) {
	uint mask = (1u << bits) - 1;
	return (src >> off) & mask;
}
uint ABfiM(uint src, uint ins, uint bits) {
	uint mask = (1u << bits) - 1;
	return (ins & mask) | (src & (~mask));
}
uint2 ARmp8x8(uint a) {
	return uint2(ABfe(a, 1u, 3u), ABfiM(ABfe(a, 3u, 3u), a, 1u));
}

[numthreads(64, 1, 1)]
void main(uint3 LocalThreadId : SV_GroupThreadID, uint3 WorkGroupId : SV_GroupID, uint3 Dtid : SV_DispatchThreadID) {
	uint2 gxy = ARmp8x8(LocalThreadId.x) * 2 + uint2(WorkGroupId.x << 4u, WorkGroupId.y << 4u);

	float2 pos = ((gxy + viewportOffset) / 2 + 0.5f) * float2(inputPtX, inputPtY);
	float4 c = A4KS4(pos);

	pos -= 0.25f * float2(inputPtX, inputPtY);
	gxy += viewport.xy;
	if (gxy.x < viewport.z && gxy.y < viewport.w) {
		OUTPUT[gxy] = float4(c.x + ORIGIN.SampleLevel(sam1, pos, 0).rgb, 1);
	}

	gxy.x += 1u;
	pos.x += 0.5f * inputPtX;
	if (gxy.x < viewport.z && gxy.y < viewport.w) {
		OUTPUT[gxy] = float4(c.y + ORIGIN.SampleLevel(sam1, pos, 0).rgb, 1);
	}

	gxy.y += 1u;
	pos.y += 0.5f * inputPtY;
	if (gxy.x < viewport.z && gxy.y < viewport.w) {
		OUTPUT[gxy] = float4(c.w + ORIGIN.SampleLevel(sam1, pos, 0).rgb, 1);
	}

	gxy.x -= 1u;
	pos.x -= 0.5f * inputPtX;
	if (gxy.x < viewport.z && gxy.y < viewport.w) {
		OUTPUT[gxy] = float4(c.z + ORIGIN.SampleLevel(sam1, pos, 0).rgb, 1);
	}
}
