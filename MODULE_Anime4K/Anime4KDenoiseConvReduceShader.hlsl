// Denoise 版本的 Conv-Reduce
// 移植自 https://github.com/bloc97/Anime4K/blob/master/glsl/Upscale%2BDenoise/Anime4K_Upscale_CNN_M_x2_Denoise.glsl
//
// Anime4K-v3.1-Upscale(x2)+Denoise-CNN(M)-Conv-Reduce


#define MAGPIE_INPUT_COUNT 5
#define MAGPIE_NO_CHECK
#include "Anime4K.hlsli"


D2D_PS_ENTRY(main) {
	InitMagpieSampleInput();

	float4 a = Uncompress(SampleInputCur(0));
	float4 b = Uncompress(SampleInputCur(1));
	float4 c = Uncompress(SampleInputCur(2));
	float4 d = Uncompress(SampleInputCur(3));
	float4 e = Uncompress(SampleInputCur(4));

	float4 na = -min(a, ZEROS4);
	float4 nb = -min(b, ZEROS4);
	float4 nc = -min(c, ZEROS4);
	float4 nd = -min(d, ZEROS4);
	float4 ne = -min(e, ZEROS4);

	a = max(a, ZEROS4);
	b = max(b, ZEROS4);
	c = max(c, ZEROS4);
	d = max(d, ZEROS4);
	e = max(e, ZEROS4);

	float o = 0.048128415 * a.x + -0.10200983 * a.y + 0.0026888845 * a.z + 0.03718083 * a.w + 0.0038677044 * na.x + 0.19192158 * na.y + -0.07810309 * na.z + 0.010487845 * na.w + 0.03670921 * b.x + -0.038882297 * b.y + -0.037679777 * b.z + -0.012084925 * b.w + 0.090262465 * nb.x + -0.004547179 * nb.y + 0.0059687584 * nb.z + 0.051256124 * nb.w + -0.11432519 * c.x + -0.25872356 * c.y + 0.0054702796 * c.z + -0.012581099 * c.w + 0.015949834 * nc.x + 0.21601027 * nc.y + 0.035843574 * nc.z + 0.017208261 * nc.w + -0.056919403 * d.x + -0.18486539 * d.y + -0.02737798 * d.z + -0.3186765 * d.w + -0.13511881 * nd.x + 0.35757625 * nd.y + -0.07571729 * nd.z + -0.11691222 * nd.w + -0.2406404 * e.x + -0.18846813 * e.y + -0.090694115 * e.z + 0.08896013 * e.w + 0.16347 * ne.x + 0.099284545 * ne.y + 0.16371554 * ne.z + -0.042760517 * ne.w + -0.014356738;
	float p = 0.034463048 * a.x + -0.10106072 * a.y + 0.0153113 * a.z + 0.013266783 * a.w + -0.0050172983 * na.x + 0.15015306 * na.y + -0.1432366 * na.z + -0.0013678991 * na.w + 0.008594857 * b.x + 0.004623611 * b.y + -0.059459336 * b.z + -0.013174561 * b.w + 0.021199493 * nb.x + -0.025345081 * nb.y + 0.083974496 * nb.z + 0.08165798 * nb.w + -0.09537475 * c.x + -0.08943068 * c.y + -0.02914935 * c.z + 0.010825835 * c.w + -0.04871495 * nc.x + 0.21459627 * nc.y + -0.0050241314 * nc.z + -0.008088038 * nc.w + -0.0045245662 * d.x + -0.053880397 * d.y + 0.04765565 * d.z + -0.06589436 * d.w + 0.031551003 * nd.x + -0.02856088 * nd.y + -0.21330751 * nd.z + 0.14608456 * nd.w + -0.12683192 * e.x + 0.15810186 * e.y + 0.11550806 * e.z + -0.058062166 * e.w + 0.037682347 * ne.x + -0.03632457 * ne.y + -0.021607846 * ne.z + 0.09143093 * ne.w + -0.0076093744;
	float q = 0.026701592 * a.x + -0.078241214 * a.y + 0.118998125 * a.z + 0.06534085 * a.w + -0.018886134 * na.x + 0.11944017 * na.y + 0.06824227 * na.z + 0.013486396 * na.w + 0.020998007 * b.x + -0.055520564 * b.y + 0.002212575 * b.z + -0.00065796264 * b.w + -0.081669435 * nb.x + 0.014998951 * nb.y + -0.026731629 * nb.z + -0.057044547 * nb.w + 0.06701295 * c.x + 0.084943585 * c.y + 0.07812323 * c.z + 0.027192006 * c.w + -0.025491228 * nc.x + 0.058227003 * nc.y + 0.007927143 * nc.z + 0.0028146622 * nc.w + -0.070682466 * d.x + -0.08310049 * d.y + -0.0860419 * d.z + -0.4338729 * d.w + -0.09763112 * nd.x + 0.18996777 * nd.y + -0.24132325 * nd.z + 0.0043926323 * nd.w + -0.10540394 * e.x + -0.19668445 * e.y + -0.30052847 * e.z + -0.14361969 * e.w + 0.20132412 * ne.x + 0.08645794 * ne.y + 0.21893042 * ne.z + 0.110118836 * ne.w + -0.032480482;
	float r = -0.012988379 * a.x + 0.01449243 * a.y + 0.1186362 * a.z + 0.021411385 * a.w + -0.02190659 * na.x + 0.08573852 * na.y + 0.029420571 * na.z + 0.04271885 * na.w + 0.020516774 * b.x + -0.008869406 * b.y + 0.06774458 * b.z + -0.02412687 * b.w + -0.06278506 * nb.x + 0.0015959308 * nb.y + 0.06922979 * nb.z + -0.014656813 * nb.w + 0.13683714 * c.x + 0.0055245673 * c.y + -0.039630424 * c.z + 0.023636617 * c.w + -0.031803787 * nc.x + -0.01460251 * nc.y + 0.015318757 * nc.z + -0.0058491337 * nc.w + -0.120180495 * d.x + -0.28844154 * d.y + 0.0075656036 * d.z + -0.446147 * d.w + -0.108871296 * nd.x + 0.28307307 * nd.y + -0.47336864 * nd.z + 0.0047260863 * nd.w + -0.10478753 * e.x + 0.082965665 * e.y + -0.30823767 * e.z + 0.11182321 * e.w + 0.16890883 * ne.x + 0.042257413 * ne.y + 0.22344704 * ne.z + -0.07987242 * ne.w + -0.017264554;

	return compressLinear(float4(o, p, q, r), -1, 1);
}
